#!/usr/bin/python3

# Copyright © 2013 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import collections
import functools
import io
import sys

import enchant.tokenize

def misspellings_sorting_key(item):
    word, occurences = item
    return -len(occurences), word

def occurences_sorting_key(item):
    lcontext, word, rcontext = item
    return (rcontext, lcontext[::-1])

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('files', metavar='<file>', nargs='*', default=['-'])
    ap.add_argument('--language', metavar='<lang>', default='en')
    ap.add_argument('--input-encoding', metavar='<enc>', default='utf-8')
    ap.add_argument('--output-encoding', metavar='<enc>', default='utf-8')
    ap.add_argument('--suggest', metavar='<n>', type=int, default=0)
    options = ap.parse_args()
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=options.output_encoding)
    split_words = enchant.tokenize.get_tokenizer(options.language)
    dictionary = enchant.Dict(options.language)
    spellcheck = functools.lru_cache(maxsize=None)(
        dictionary.check
    )
    misspellings = collections.defaultdict(list)
    for path in options.files:
        if path == '-':
            file = io.TextIOWrapper(sys.stdin.buffer, encoding=options.input_encoding)
        else:
            file = open(path, 'rt', encoding=options.input_encoding)
        with file:
            for line in file:
                for word, pos in split_words(line):
                    if not spellcheck(word):
                        misspellings[word] += [line.strip()]
    for word, occurences in sorted(misspellings.items(), key=misspellings_sorting_key):
        extra = ''
        if options.suggest > 0:
            suggestions = dictionary.suggest(word)[:options.suggest]
            if suggestions:
                extra = ' ({sug})'.format(sug=', '.join(suggestions))
        print(word + extra + ':')
        occurences = sorted(
            (o.partition(word) for o in occurences),
            key=occurences_sorting_key,
        )
        lwidth = max(len(lcontext) for lcontext, _, _ in occurences)
        rwidth = max(len(rcontext) for _, _, rcontext in occurences)
        for lcontext, word, rcontext in occurences:
            print('| {lc:>{lw}}{word}{rc:<{rw}}'.format(
                lc=lcontext, lw=lwidth,
                word=word,
                rc=rcontext, rw=rwidth,
            ))
        print('', ' ' * lwidth, '^' * len(word))
        print()

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
