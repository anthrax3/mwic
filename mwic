#!/usr/bin/python3

# Copyright © 2013 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import collections
import functools
import io
import itertools
import re
import sys

import enchant.tokenize

def misspellings_sorting_key(item):
    word, occurrences = item
    return -sum(occurrences.values()), word

def occurrences_sorting_key(item):
    lcontext, word, rcontext, n = item
    return (rcontext, lcontext[::-1])

def ltrim(s, n, *, char='…'):
    if len(s) <= n:
        return s
    if n <= 1:
        return char
    return char + s[-n+1:]

def rtrim(s, n, *, char='…'):
    if len(s) <= n:
        return s
    if n <= 1:
        return char
    return s[:n-1] + char

def subst_underline(match):
    group = match.group(1)
    if group is None:
        return ' '
    else:
        return '^' * len(group)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('files', metavar='<file>', nargs='*', default=['-'])
    ap.add_argument('--language', metavar='<lang>', default='en')
    ap.add_argument('--input-encoding', metavar='<enc>', default='utf-8')
    ap.add_argument('--max-context-width', metavar='<n>', default=30)
    ap.add_argument('--suggest', metavar='<n>', type=int, default=0)
    options = ap.parse_args()
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, 'utf-8')
    split_words = enchant.tokenize.get_tokenizer(options.language)
    dictionary = enchant.Dict(options.language)
    spellcheck = functools.lru_cache(maxsize=None)(
        dictionary.check
    )
    misspellings = collections.defaultdict(collections.Counter)
    for path in options.files:
        if path == '-':
            file = io.TextIOWrapper(sys.stdin.buffer, encoding=options.input_encoding)
        else:
            file = open(path, 'rt', encoding=options.input_encoding)
        with file:
            for line in file:
                for word, pos in split_words(line):
                    if not spellcheck(word):
                        misspellings[word][line.strip()] += 1
    misspellings = sorted(misspellings.items(), key=misspellings_sorting_key)
    rare_misspellings = collections.defaultdict(collections.Counter)
    for word, occurrences in misspellings:
        if len(occurrences) == 1:
            [occurrence] = occurrences
            rare_misspellings[occurrence][word] += 1
            continue
        extra = ''
        if options.suggest > 0:
            suggestions = dictionary.suggest(word)[:options.suggest]
            if suggestions:
                extra = ' ({sug})'.format(sug=', '.join(suggestions))
        print(word + extra + ':')
        occurrences = sorted(
            (o.partition(word) + (n,) for o, n in occurrences.items()),
            key=occurrences_sorting_key,
        )
        occurrences = [
            (
                ltrim(lcontext, options.max_context_width),
                word,
                rtrim(rcontext, options.max_context_width),
                n
            )
            for lcontext, word, rcontext, n
            in occurrences
        ]
        lwidth = max(len(lcontext) for lcontext, _, _, _ in occurrences)
        rwidth = max(len(rcontext) for _, _, rcontext, _ in occurrences)
        for (lcontext, word, rcontext, n), group in itertools.groupby(occurrences):
            if n > 1:
                extra = ' [×{n}]'.format(n=n)
            print('| {lc:>{lw}}{word}{rc:<{rw}}{extra}'.format(
                lc=lcontext, lw=lwidth,
                word=word,
                rc=rcontext, rw=rwidth,
                extra=extra,
            ))
        print('', ' ' * lwidth, '^' * len(word))
        print()
    rare_misspellings = sorted(rare_misspellings.items(), key=misspellings_sorting_key)
    for occurrence, words in rare_misspellings:
        header = []
        for word in sorted(words):
            extra = ''
            if options.suggest > 0:
                suggestions = dictionary.suggest(word)[:options.suggest]
                if suggestions:
                    extra = ' ({sug})'.format(sug=', '.join(suggestions))
            header += [word + extra]
        print(', '.join(header) + ':')
        regexp = re.compile('({words})|.'.format(words='|'.join(
            re.escape(word) for word in sorted(words, key=len, reverse=True)
        )))
        underline = regexp.sub(subst_underline, occurrence)
        lwidth = len(underline) - len(underline.lstrip())
        rwidth = len(underline) - len(underline.rstrip())
        lexceed = lwidth - options.max_context_width
        rexceed = rwidth - options.max_context_width
        if lexceed > 0:
            lwidth = len(occurrence) - lexceed
            occurrence = ltrim(occurrence, lwidth)
            underline = ltrim(underline, lwidth, char=' ')
        if rexceed > 0:
            rwidth = len(occurrence) - rexceed
            occurrence = rtrim(occurrence, rwidth)
            underline = rtrim(underline, rwidth, char=' ')
        print('|', occurrence)
        print(' ', underline)
        print()

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
