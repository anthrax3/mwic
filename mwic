#!/usr/bin/python3

import argparse
import collections
import functools

import enchant.tokenize

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('files', metavar='<file>', nargs='+')
    ap.add_argument('--language', metavar='<lang>', default='en')
    ap.add_argument('--encoding', metavar='<enc>', default='utf-8')
    ap.add_argument('--suggest', metavar='<n>', type=int, default=0)
    options = ap.parse_args()
    split_words = enchant.tokenize.get_tokenizer(options.language)
    dictionary = enchant.Dict(options.language)
    spellcheck = functools.lru_cache(maxsize=None)(
        dictionary.check
    )
    misspellings = collections.defaultdict(list)
    for path in options.files:
        with open(path, 'rt', encoding=options.encoding) as file:
            for line in file:
                for word, pos in split_words(line):
                    if not spellcheck(word):
                        misspellings[word] += [line.strip()]
    for word, occurences in sorted(misspellings.items()):
        extra = ''
        if options.suggest > 0:
            suggestions = dictionary.suggest(word)[:options.suggest]
            if suggestions:
                extra = ' ({sug})'.format(sug=', '.join(suggestions))
        print(word + extra + ':')
        occurences = [o.partition(word) for o in occurences]
        lwidth = max(len(lcontext) for lcontext, _, _ in occurences)
        rwidth = max(len(rcontext) for _, _, rcontext in occurences)
        for lcontext, word, rcontext in occurences:
            print('| {lc:>{lw}}{word}{rc:<{rw}}'.format(
                lc=lcontext, lw=lwidth,
                word=word,
                rc=rcontext, rw=rwidth,
            ))
        print()

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
